// Servicio de IA gratuito para respuestas automÃ¡ticas
interface AIResponse {
  message: string;
  confidence: number;
}

interface ChatContext {
  userMessage: string;
  conversationHistory: string[];
  businessType: string;
  language: string;
}

export class FreeAIService {
  private responses: Map<string, string[]> = new Map();
  private patterns: Map<RegExp, string[]> = new Map();

  constructor() {
    this.initializeResponses();
  }

  private initializeResponses() {
    // Respuestas de saludo
    this.responses.set('greeting', [
      'Â¡Hola! ğŸ‘‹ Gracias por contactarnos. Â¿En quÃ© podemos ayudarte hoy?',
      'Â¡Bienvenido/a! ğŸ˜Š Estamos aquÃ­ para ayudarte. Â¿QuÃ© necesitas?',
      'Â¡Hola! Es un gusto saludarte. Â¿CÃ³mo podemos asistirte?'
    ]);

    // Respuestas de informaciÃ³n
    this.responses.set('info', [
      'Te ayudo con informaciÃ³n sobre nuestros productos y servicios. Â¿QuÃ© te interesa conocer?',
      'Estoy aquÃ­ para brindarte toda la informaciÃ³n que necesites. Â¿En quÃ© puedo ayudarte?',
      'Con gusto te proporciono informaciÃ³n. Â¿Sobre quÃ© producto o servicio quieres saber?'
    ]);

    // Respuestas de precios
    this.responses.set('pricing', [
      'Para informaciÃ³n sobre precios y promociones especiales, dÃ©jame conectarte con un asesor especializado.',
      'Tenemos excelentes ofertas disponibles. Un momento mientras reviso los precios actuales para ti.',
      'Los precios varÃ­an segÃºn el producto. Â¿QuÃ© producto especÃ­fico te interesa?'
    ]);

    // Respuestas de disponibilidad
    this.responses.set('availability', [
      'Verifico la disponibilidad del producto. Un momento por favor...',
      'DÃ©jame consultar nuestro inventario para confirmar la disponibilidad.',
      'Reviso el stock disponible. Â¿QuÃ© producto necesitas?'
    ]);

    // Respuestas de despedida
    this.responses.set('goodbye', [
      'Â¡Gracias por contactarnos! ğŸ˜Š Si necesitas algo mÃ¡s, estarÃ© aquÃ­ para ayudarte.',
      'Ha sido un placer ayudarte. Â¡Que tengas un excelente dÃ­a!',
      'Â¡Hasta pronto! No dudes en escribirnos cuando necesites ayuda.'
    ]);

    // Respuestas por defecto
    this.responses.set('default', [
      'Gracias por tu mensaje. Un asesor te responderÃ¡ pronto para brindarte la mejor atenciÃ³n.',
      'Hemos recibido tu consulta. En breve un especialista se comunicarÃ¡ contigo.',
      'Tu mensaje es importante para nosotros. Te responderemos lo antes posible.'
    ]);

    // Patrones de reconocimiento
    this.patterns.set(/\b(hola|hi|hello|buenos dÃ­as|buenas tardes|buenas noches|saludos)\b/i, ['greeting']);
    this.patterns.set(/\b(precio|costo|vale|cuÃ¡nto|cuesta|valor|tarifa)\b/i, ['pricing']);
    this.patterns.set(/\b(disponible|stock|hay|tienen|existe|inventario)\b/i, ['availability']);
    this.patterns.set(/\b(informaciÃ³n|info|detalles|caracterÃ­sticas|especificaciones)\b/i, ['info']);
    this.patterns.set(/\b(adiÃ³s|bye|hasta luego|nos vemos|chao|gracias)\b/i, ['goodbye']);
  }

  async generateResponse(context: ChatContext): Promise<AIResponse> {
    const { userMessage, businessType, language } = context;
    
    // Analizar el mensaje del usuario
    const category = this.analyzeMessage(userMessage);
    
    // Generar respuesta contextual
    let responses = this.responses.get(category) || this.responses.get('default')!;
    
    // Personalizar para el tipo de negocio
    if (businessType === 'beauty' && category === 'info') {
      responses = [
        'Te ayudo con informaciÃ³n sobre nuestros tratamientos de belleza y productos. Â¿QuÃ© te interesa conocer?',
        'Tenemos una amplia gama de productos de belleza. Â¿Buscas algo especÃ­fico para el cuidado de tu piel?',
        'Estoy aquÃ­ para asesorarte sobre nuestros tratamientos y productos de belleza. Â¿En quÃ© puedo ayudarte?'
      ];
    }

    // Seleccionar respuesta aleatoria
    const selectedResponse = responses[Math.floor(Math.random() * responses.length)];
    
    return {
      message: selectedResponse,
      confidence: 0.8
    };
  }

  private analyzeMessage(message: string): string {
    const lowercaseMessage = message.toLowerCase();
    
    // Buscar patrones en el mensaje
    for (const [pattern, categories] of this.patterns.entries()) {
      if (pattern.test(lowercaseMessage)) {
        return categories[0];
      }
    }
    
    // Si no encuentra patrones especÃ­ficos, usar respuesta por defecto
    return 'default';
  }

  // Configurar respuestas personalizadas para un negocio
  async configureCustomResponses(userId: string, customResponses: any): Promise<void> {
    // En una implementaciÃ³n real, esto se guardarÃ­a en la base de datos
    console.log(`Configurando respuestas personalizadas para usuario: ${userId}`);
  }

  // Mejorar respuestas basadas en feedback
  async improveResponse(messageId: string, feedback: 'helpful' | 'not_helpful'): Promise<void> {
    console.log(`Feedback recibido para mensaje ${messageId}: ${feedback}`);
    // AquÃ­ se implementarÃ­a el aprendizaje automÃ¡tico simple
  }
}

export const freeAIService = new FreeAIService();