// servidor-whatsapp.js
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const express = require('express');
const socketIO = require('socket.io');
const qrcode = require('qrcode');
const fs = require('fs');
const path = require('path');

class WhatsAppManager {
    constructor() {
        this.clients = new Map(); // Almacena múltiples clientes por usuario
        this.app = express();
        this.server = require('http').createServer(this.app);
        this.io = socketIO(this.server);
        this.setupRoutes();
        this.setupSocketHandlers();
    }

    // Configuración de rutas HTTP para tu CRM
    setupRoutes() {
        this.app.use(express.json());
        this.app.use(express.static('public'));

        // Endpoint para iniciar una nueva conexión WhatsApp
        this.app.post('/api/whatsapp/connect', async (req, res) => {
            const { userId, planId } = req.body;
            
            try {
                await this.createClientForUser(userId, planId);
                res.json({ success: true, message: 'Conexión iniciada' });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // Endpoint para obtener el estado de conexión
        this.app.get('/api/whatsapp/status/:userId', (req, res) => {
            const { userId } = req.params;
            const client = this.clients.get(userId);
            
            if (!client) {
                return res.json({ connected: false, status: 'no_client' });
            }
            
            res.json({ 
                connected: client.isConnected,
                status: client.status || 'initializing'
            });
        });

        // Endpoint para enviar mensajes programáticamente
        this.app.post('/api/whatsapp/send', async (req, res) => {
            const { userId, to, message, mediaUrl } = req.body;
            
            try {
                await this.sendMessage(userId, to, message, mediaUrl);
                res.json({ success: true });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });

        // Endpoint para desconectar cliente
        this.app.post('/api/whatsapp/disconnect/:userId', async (req, res) => {
            const { userId } = req.params;
            
            try {
                await this.disconnectClient(userId);
                res.json({ success: true });
            } catch (error) {
                res.status(500).json({ success: false, error: error.message });
            }
        });
    }

    // Configuración de WebSocket para comunicación en tiempo real
    setupSocketHandlers() {
        this.io.on('connection', (socket) => {
            console.log('Cliente conectado:', socket.id);

            socket.on('join-room', (userId) => {
                socket.join(`user-${userId}`);
                console.log(`Usuario ${userId} se unió a su sala`);
            });

            socket.on('disconnect', () => {
                console.log('Cliente desconectado:', socket.id);
            });
        });
    }

    // Crear cliente WhatsApp para un usuario específico
    async createClientForUser(userId, planId) {
        // Si ya existe un cliente para este usuario, lo desconectamos primero
        if (this.clients.has(userId)) {
            await this.disconnectClient(userId);
        }

        // Configuración del cliente con autenticación local
        const client = new Client({
            authStrategy: new LocalAuth({
                clientId: `user-${userId}`,
                dataPath: './sessions'
            }),
            puppeteer: {
                headless: true,
                args: [
                    '--no-sandbox',
                    '--disable-setuid-sandbox',
                    '--disable-dev-shm-usage',
                    '--disable-accelerated-2d-canvas',
                    '--no-first-run',
                    '--no-zygote',
                    '--single-process',
                    '--disable-gpu'
                ]
            }
        });

        // Almacenar información adicional del cliente
        client.userId = userId;
        client.planId = planId;
        client.isConnected = false;
        client.status = 'initializing';

        // Configurar eventos del cliente
        this.setupClientEvents(client);

        // Inicializar cliente
        await client.initialize();
        
        // Almacenar cliente en el mapa
        this.clients.set(userId, client);
        
        return client;
    }

    // Configurar todos los eventos del cliente WhatsApp
    setupClientEvents(client) {
        // Evento cuando se genera el código QR
        client.on('qr', (qr) => {
            console.log(`QR generado para usuario ${client.userId}`);
            
            // Generar imagen QR
            qrcode.toDataURL(qr, (err, url) => {
                if (!err) {
                    // Enviar QR al frontend a través de WebSocket
                    this.io.to(`user-${client.userId}`).emit('qr-code', {
                        qr: url,
                        message: 'Escanea este código QR con tu WhatsApp'
                    });
                }
            });
        });

        // Evento cuando el cliente está listo
        client.on('ready', () => {
            console.log(`Cliente WhatsApp listo para usuario ${client.userId}`);
            client.isConnected = true;
            client.status = 'connected';
            
            // Notificar al frontend
            this.io.to(`user-${client.userId}`).emit('whatsapp-ready', {
                message: 'WhatsApp conectado exitosamente',
                number: client.info.wid.user
            });
        });

        // Evento cuando llega un mensaje
        client.on('message', async (message) => {
            console.log(`Mensaje recibido para usuario ${client.userId}:`, message.body);
            
            // Procesar mensaje con IA
            const response = await this.processMessageWithAI(message, client);
            
            if (response) {
                // Enviar respuesta automática
                await message.reply(response);
                
                // Notificar al dashboard
                this.io.to(`user-${client.userId}`).emit('message-processed', {
                    from: message.from,
                    message: message.body,
                    response: response,
                    timestamp: new Date()
                });
            }
        });

        // Evento de autenticación exitosa
        client.on('authenticated', () => {
            console.log(`Usuario ${client.userId} autenticado`);
            client.status = 'authenticated';
            
            this.io.to(`user-${client.userId}`).emit('whatsapp-authenticated', {
                message: 'Autenticación exitosa'
            });
        });

        // Evento de falla de autenticación
        client.on('auth_failure', (msg) => {
            console.error(`Falla de autenticación para usuario ${client.userId}:`, msg);
            client.status = 'auth_failed';
            
            this.io.to(`user-${client.userId}`).emit('whatsapp-auth-failed', {
                message: 'Error de autenticación',
                error: msg
            });
        });

        // Evento de desconexión
        client.on('disconnected', (reason) => {
            console.log(`Cliente desconectado para usuario ${client.userId}:`, reason);
            client.isConnected = false;
            client.status = 'disconnected';
            
            this.io.to(`user-${client.userId}`).emit('whatsapp-disconnected', {
                message: 'WhatsApp desconectado',
                reason: reason
            });
        });
    }

    // Procesar mensaje con inteligencia artificial
    async processMessageWithAI(message, client) {
        try {
            // Aquí integras tu sistema de IA
            // Este es el punto donde conectas con OpenAI, Claude, etc.
            
            const userMessage = message.body;
            const contactName = message.from;
            
            // Ejemplo de integración con OpenAI
            const aiResponse = await this.callAIService({
                message: userMessage,
                contactName: contactName,
                userId: client.userId,
                planId: client.planId
            });
            
            return aiResponse;
            
        } catch (error) {
            console.error('Error procesando mensaje con IA:', error);
            return null;
        }
    }

    // Llamar al servicio de IA (aquí integras tu provider preferido)
    async callAIService({ message, contactName, userId, planId }) {
        // Ejemplo de configuración para OpenAI
        const prompt = `
        Eres un asistente virtual para el negocio del usuario ID: ${userId}.
        Plan activo: ${planId}
        
        Responde de manera profesional y útil al siguiente mensaje:
        De: ${contactName}
        Mensaje: ${message}
        
        Instrucciones:
        - Sé cortés y profesional
        - Responde en español
        - Mantén la respuesta concisa
        - Si no puedes ayudar, deriva a un humano
        `;

        // Aquí harías la llamada real a tu servicio de IA
        // Por ejemplo, usando OpenAI, Claude, o tu propio modelo
        
        // Simulación de respuesta para el ejemplo
        return `Hola, gracias por contactarnos. He recibido tu mensaje: "${message}". ¿En qué más puedo ayudarte?`;
    }

    // Enviar mensaje programáticamente
    async sendMessage(userId, to, message, mediaUrl = null) {
        const client = this.clients.get(userId);
        
        if (!client || !client.isConnected) {
            throw new Error('Cliente no conectado');
        }

        try {
            if (mediaUrl) {
                // Enviar mensaje con media
                const media = await MessageMedia.fromUrl(mediaUrl);
                await client.sendMessage(to, media, { caption: message });
            } else {
                // Enviar mensaje de texto
                await client.sendMessage(to, message);
            }
        } catch (error) {
            throw new Error(`Error enviando mensaje: ${error.message}`);
        }
    }

    // Desconectar cliente
    async disconnectClient(userId) {
        const client = this.clients.get(userId);
        
        if (client) {
            await client.destroy();
            this.clients.delete(userId);
            
            // Eliminar sesión guardada
            const sessionPath = path.join('./sessions', `session-user-${userId}`);
            if (fs.existsSync(sessionPath)) {
                fs.rmSync(sessionPath, { recursive: true });
            }
        }
    }

    // Iniciar el servidor
    start(port = 3000) {
        this.server.listen(port, () => {
            console.log(`Servidor WhatsApp ejecutándose en puerto ${port}`);
        });
    }
}

// Inicializar y exportar
const whatsappManager = new WhatsAppManager();
whatsappManager.start();

module.exports = whatsappManager;